package chiphead.io.export;

import java.io.IOException;
import java.io.OutputStream;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFPalette;
import org.apache.poi.hssf.usermodel.HSSFRichTextString;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.HSSFColor;
import org.apache.poi.hssf.util.Region;

import chiphead.config.Constants;
import chiphead.model.ComputeWeekNum;
import chiphead.utils.DateUtil;

public class ExportExcel<T> {
	public void exportExcel(String title,
			Collection<T> dataset, OutputStream out) {
		// 声明一个工作薄
		HSSFWorkbook workbook = new HSSFWorkbook();
		// 生成一个表格
		HSSFSheet sheet = workbook.createSheet(title);
		sheet.setDefaultColumnWidth(10);

		// 生成一个字体
		HSSFFont font = workbook.createFont();
		font.setFontName("宋体");
		font.setFontHeightInPoints((short) 11);
		// font.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);

		HSSFPalette customPalette = workbook.getCustomPalette();
		customPalette.setColorAtIndex(HSSFColor.AQUA.index, (byte) 218,
				(byte) 238, (byte) 243); // 需求
		customPalette.setColorAtIndex(HSSFColor.BLUE.index, (byte) 183,
				(byte) 222, (byte) 232); // 设计
		customPalette.setColorAtIndex(HSSFColor.WHITE.index, (byte) 146,
				(byte) 205, (byte) 220); // 开发
		customPalette.setColorAtIndex(HSSFColor.BLACK.index, (byte) 253,
				(byte) 233, (byte) 217); // UT
		customPalette.setColorAtIndex(HSSFColor.BROWN.index, (byte) 252,
				(byte) 213, (byte) 180); // ST
		customPalette.setColorAtIndex(HSSFColor.CORAL.index, (byte) 250,
				(byte) 191, (byte) 143); // UAT
		customPalette.setColorAtIndex(HSSFColor.GOLD.index, (byte) 146,
				(byte) 208, (byte) 80); // 上线
		customPalette.setColorAtIndex(HSSFColor.INDIGO.index, (byte) 255,
				(byte) 192, (byte) 0); // 超出7的黄色

		HSSFColor colors[] = new HSSFColor[12];
		// colors[0] = customPalette.findColor((byte) 153, (byte) 204, (byte)
		// 255); // 表头
		colors[1] = customPalette.getColor(HSSFColor.AQUA.index);	// 需求
		colors[2] = customPalette.getColor(HSSFColor.BLUE.index);	// 设计
		colors[3] = customPalette.getColor(HSSFColor.WHITE.index);	// 开发
		colors[4] = customPalette.getColor(HSSFColor.BLACK.index);	// UT
		colors[5] = customPalette.getColor(HSSFColor.BROWN.index);	// ST
		colors[6] = customPalette.getColor(HSSFColor.CORAL.index);	// UAT
		colors[7] = customPalette.getColor(HSSFColor.GOLD.index);	// 上线
		colors[8] = customPalette.getColor(HSSFColor.INDIGO.index);	// 黄色
		colors[9] = customPalette.getColor(HSSFColor.GREY_50_PERCENT.index);// 灰色
		colors[10] = customPalette.getColor(HSSFColor.GREEN.index);	// 绿色
		colors[11] = customPalette.getColor(HSSFColor.RED.index);	// 红色

		HSSFCellStyle[] styles = new HSSFCellStyle[13];
		//设字体，居中等
		for (int i = 0; i < styles.length; i++) {
			styles[i] = workbook.createCellStyle();
			styles[i].setFont(font);
//			styles[i].setBorderBottom(HSSFCellStyle.BORDER_DOTTED); //下边框
//			styles[i].setBorderLeft(HSSFCellStyle.BORDER_DOTTED);//左边框
//			styles[i].setBorderTop(HSSFCellStyle.BORDER_DOTTED);//上边框
//			styles[i].setBorderRight(HSSFCellStyle.BORDER_DOTTED);//右边框
			
			styles[i].setAlignment(HSSFCellStyle.ALIGN_CENTER);
		}	

		styles[0].setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER);
		
		//设颜色
		for (int i = 1; i < styles.length-1; i++) {//1-11都设成对应颜色,0和12无色
			setForeground(styles[i], colors[i].getIndex());
		}
		
		int widthBase = 256;
		List<Integer> widths = new ArrayList<Integer>();
		int weekNum = ComputeWeekNum.getWeekNumOfCurYear();
		
		HSSFRow row = sheet.createRow(0);
		int index = 0;
		if (title.startsWith(Constants.PROJTABLENAME)) {
			String[] headers = { "审批状态", "项目编号", "项目名称", "项目类型", "项目经理", "当前阶段",
					"当前状态", "风险和问题", "项目成员", "", "", "开发周期", "", "", "",
					"产能数据", "", "", "", "质量数据", "", "", "QA过程审计", "QC过程审计", "",
					"", "项目后评估（组长填报、集中审批）", "", "备注" };
			for (short i = 0; i < headers.length; i++) {
				HSSFCell cell = row.createCell(i);
				cell.setCellStyle(styles[0]);
				HSSFRichTextString text = new HSSFRichTextString(headers[i]);
				cell.setCellValue(text);
			}

			row = sheet.createRow(1);
			String[] headers2 = {"", "", "", "", "", "", "", "", "设计", "开发", "评审",
					"立项日期", "计划结项日期", "实际结项日期", "实际天数", "计划工作量", "实际工作量",
					"结项功能点数", "生产率", "冒烟测试不通过次数", "ST测试类型", "ST缺陷密度", "NC",
					"设计审计", "代码审计", "上线审计", "项目经验教训", "P级事件及分析", "" };
			for (short i = 0; i < headers2.length; i++) {
				HSSFCell cell = row.createCell(i);
				cell.setCellStyle(styles[0]);
				HSSFRichTextString text = new HSSFRichTextString(headers2[i]);
				cell.setCellValue(text);
			}
			index++;

			for (int i = 0; i < 8; i++) {
				sheet.addMergedRegion(new Region(0, (short) i, 1, (short) i));
			}
			sheet.addMergedRegion(new Region(0, (short) 8, 0, (short) 10));
			sheet.addMergedRegion(new Region(0, (short) 11, 0, (short) 14));
			sheet.addMergedRegion(new Region(0, (short) 15, 0, (short) 18));
			sheet.addMergedRegion(new Region(0, (short) 19, 0, (short) 21));
			sheet.addMergedRegion(new Region(0, (short) 23, 0, (short) 25));
			sheet.addMergedRegion(new Region(0, (short) 26, 0, (short) 27));
			sheet.addMergedRegion(new Region(0, (short) 28, 1, (short) 28));
			
			widths.add(10 * widthBase);
			widths.add(10 * widthBase);
			widths.add(42 * widthBase);
			widths.add(10 * widthBase);
			widths.add(10 * widthBase);
			widths.add(10 * widthBase);
			widths.add(10 * widthBase);
			widths.add(18 * widthBase);
			widths.add(18 * widthBase);
			widths.add(18 * widthBase);
			widths.add(12 * widthBase);
			widths.add(14 * widthBase);
			widths.add(14 * widthBase);
			widths.add(14 * widthBase);
			widths.add(10 * widthBase);
			widths.add(12 * widthBase);
			widths.add(12 * widthBase);
			widths.add(14 * widthBase);			
			widths.add(10 * widthBase);
			widths.add(24 * widthBase);
			widths.add(18 * widthBase);
			widths.add(14 * widthBase);
			widths.add(14 * widthBase);
			widths.add(12 * widthBase);
			widths.add(12 * widthBase);
			widths.add(12 * widthBase);
			widths.add(20 * widthBase);
			widths.add(20 * widthBase);
			widths.add(16 * widthBase);
		} else if (title.startsWith(Constants.PROJSCHDTABLENAME)) {
			String headerString = "项目编号|项目名称|业务负责人|项目经理|内审员|当前阶段";
			String headerString2 = ComputeWeekNum
					.getWholeYearTableHead(headerString + "|");
			String[] headers = headerString2.split("\\|");
			for (short i = 0; i < headers.length; i++) {
				HSSFCell cell = row.createCell(i);
				row.createCell(i);
				cell.setCellStyle(styles[0]);
				HSSFRichTextString text = new HSSFRichTextString(headers[i]);
				cell.setCellValue(text);
			}
			
			widths.add(10 * widthBase);
			widths.add(42 * widthBase);
			widths.add(12 * widthBase);
			widths.add(10 * widthBase);
			widths.add(8 * widthBase);
			widths.add(10 * widthBase);
			for (int i = 0; i < weekNum; i++) {
				widths.add(12 * widthBase);
			}
		} else if (title.startsWith(Constants.SCHDTABLENAME)) {
			String headerString = "人员|状态|类型|项目编号|项目名称";
			String headerString2 = ComputeWeekNum
					.getWholeYearTableHead(headerString + "|");
			String[] headers = headerString2.split("\\|");
			for (short i = 0; i < headers.length; i++) {
				HSSFCell cell = row.createCell(i);
				cell.setCellStyle(styles[0]);
				HSSFRichTextString text = new HSSFRichTextString(headers[i]);
				cell.setCellValue(text);
			}
			
			widths.add(8 * widthBase);
			widths.add(8 * widthBase);
			widths.add(8 * widthBase);
			widths.add(10 * widthBase);
			widths.add(32 * widthBase);
			for (int i = 0; i < weekNum; i++) {
				widths.add(12 * widthBase);
			}
		}

		// 遍历集合数据，产生数据行
		Iterator<T> it = dataset.iterator();

		while (it.hasNext()) {
			index++;
			row = sheet.createRow(index);
			T t = (T) it.next();
			if (t instanceof List<?>) {
				List<String> list = (List<String>) t;
				String item;
				for (int i = 0; i < list.size(); i++) {
					HSSFCell cell = row.createCell(i);
					item = list.get(i);
					if (item == null) {
						cell.setCellValue("");
						break;
					}

					int start = cell.getColumnIndex();
					if (!item.equals("")) {
						if (!title.startsWith(Constants.PROJSCHDTABLENAME)) {
							cell.setCellValue(item);							
						} else {
							while (i < (list.size() - 1) && item.equals(list.get(i + 1))) {
								cell = row.createCell(i);
								i++;
							}
							if (start != i && i > 5) {
								Region region = new Region(index, (short)start, index, (short) i);
								sheet.addMergedRegion(region);
							} else if (start == i) {
								
							}
							row.getCell(start).setCellValue(item);							
						}
					}

					if (title.startsWith(Constants.PROJSCHDTABLENAME)) {
						if (i <= 5) {
							cell.setCellStyle(styles[12]);
							continue;
						}
						if (item.contains("需求")) {
							row.getCell(start).setCellStyle(styles[1]);
						} else if (item.contains("设计")) {
							row.getCell(start).setCellStyle(styles[2]);
						} else if (item.contains("开发")) {
							row.getCell(start).setCellStyle(styles[3]);
						} else if (item.contains("UT")) {
							row.getCell(start).setCellStyle(styles[4]);
						} else if (item.contains("ST")) {
							row.getCell(start).setCellStyle(styles[5]);
						} else if (item.contains("UAT")) {
							row.getCell(start).setCellStyle(styles[6]);
						} else if (item.contains("上线")) {
							row.getCell(start).setCellStyle(styles[7]);
						} else {
							row.getCell(start).setCellStyle(styles[12]); // transparent
						}
					} else if (title.startsWith(Constants.SCHDTABLENAME) && i > 5) {
						cell.setCellStyle(styles[12]);//无色
						//解析颜色码
						if(item.contains("/") && item.contains("[")){//阶段和时间数据
							if(item.startsWith("[BGCOLOR=#999999]")){//灰色
								cell.setCellStyle(styles[9]);
							}
							else if(item.startsWith("[BGCOLOR=#b94a48]")){//红色
								cell.setCellStyle(styles[11]);
							}
							else if(item.startsWith("[BGCOLOR=#FFC500]")){//黄色
								cell.setCellStyle(styles[8]);
							}
							else if(item.startsWith("[BGCOLOR=#22B14C]")){//绿色
								cell.setCellStyle(styles[10]);
							}
							cell.setCellValue(item.substring(17));//去除颜色码
						}
		
					} else {
						cell.setCellStyle(styles[12]);
					}
				}
			} else {
				// 利用反射，根据javabean属性的先后顺序，动态调用getXxx()方法得到属性值
				Field[] fields = t.getClass().getDeclaredFields();
				for (short i = 0; i < fields.length; i++) {
					HSSFCell cell = row.createCell(i);
					cell.setCellStyle(styles[12]);
					Field field = fields[i];
					String fieldName = field.getName();
					String getMethodName = "get"
							+ fieldName.substring(0, 1).toUpperCase()
							+ fieldName.substring(1);

					String textValue = null;
					Object value = null;
					try {
						Class tCls = t.getClass();
						Method getMethod = tCls.getMethod(getMethodName,
								new Class[] {});
						value = getMethod.invoke(t, new Object[] {});
						// 判断值的类型后进行强制类型转换
						if (value instanceof Integer) {
							int intValue = (Integer) value;
							cell.setCellValue(intValue);
						} else if (value instanceof BigInteger) {
							BigInteger intValue = (BigInteger) value;
							cell.setCellValue(intValue.doubleValue());
						} else if (value instanceof Date) {
							Date dateValue = (Date) value;
							cell.setCellValue(DateUtil.getDateStr(dateValue));
						} else if (value instanceof Double) {
							double dValue = (Double) value;
							cell.setCellValue(dValue);
						} else {
							// 其它数据类型都当作字符串简单处理
							textValue = value == null ? "" : value.toString();
							cell.setCellValue(textValue);
						}
					} catch (SecurityException e) {
						e.printStackTrace();
					} catch (NoSuchMethodException e) {
						e.printStackTrace();
					} catch (IllegalArgumentException e) {
						e.printStackTrace();
					} catch (IllegalAccessException e) {
						e.printStackTrace();
					} catch (InvocationTargetException e) {
						e.printStackTrace();
					} finally {
						// 清理资源
					}
				}
			} // else
		}
		for (int i = 0; i < widths.size(); i++) {
			sheet.setColumnWidth(i, widths.get(i));
		}
		try {
			workbook.write(out);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void setForeground(HSSFCellStyle style, short foreground) {
		if (foreground != 0) {
			style.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);
			style.setFillForegroundColor(foreground);
		}
	}

//	private void setRegionStyle(HSSFSheet sheet, Region region, HSSFCellStyle cs) {
//
//		for (int i = region.getRowFrom(); i <= region.getRowTo(); i++) {
//			HSSFRow row = sheet.getRow(i);
//			if (region.getColumnFrom() != region.getColumnTo()) {
//				for (int j = region.getColumnFrom(); j <= region.getColumnTo(); j++) {
//					HSSFCell cell = row.getCell((short) j);
//					cell.setCellStyle(cs);
//				}
//			}
//		}
//	}
}
